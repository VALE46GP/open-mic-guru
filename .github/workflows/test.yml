name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false
        env:
          CI: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.TEST_PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_PGDATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Create test env file
        run: |
          cd backend
          cat > .env << EOL
          PGUSER=${{ secrets.TEST_PGUSER }}
          PGHOST=${{ secrets.TEST_PGHOST }}
          PGDATABASE=${{ secrets.TEST_PGDATABASE }}
          PGPASSWORD=${{ secrets.TEST_PGPASSWORD }}
          PGPORT=${{ secrets.TEST_PGPORT }}
          JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}
          NODE_ENV=test
          PORT=3001
          GOOGLE_CLIENT_ID=${{ secrets.TEST_GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.TEST_GOOGLE_CLIENT_SECRET }}
          CALLBACK_URL=${{ secrets.TEST_CALLBACK_URL }}
          REACT_APP_AWS_ACCESS_KEY_ID=${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          REACT_APP_AWS_SECRET_ACCESS_KEY=${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          REACT_APP_AWS_REGION=${{ secrets.TEST_AWS_REGION }}
          REACT_APP_S3_BUCKET_NAME=${{ secrets.TEST_S3_BUCKET_NAME }}
          EOL

      - name: Create test setup file
        run: |
          cd backend/tests
          cat > setup.js << EOL
          process.env.NODE_ENV = 'test';
          process.env.PORT = '3001';

          process.env.PGUSER = '${{ secrets.TEST_PGUSER }}';
          process.env.PGHOST = '${{ secrets.TEST_PGHOST }}';
          process.env.PGDATABASE = '${{ secrets.TEST_PGDATABASE }}';
          process.env.PGPASSWORD = '${{ secrets.TEST_PGPASSWORD }}';
          process.env.PGPORT = '${{ secrets.TEST_PGPORT }}';

          process.env.JWT_SECRET = '${{ secrets.TEST_JWT_SECRET }}';
          process.env.GOOGLE_CLIENT_ID = '${{ secrets.TEST_GOOGLE_CLIENT_ID }}';
          process.env.GOOGLE_CLIENT_SECRET = '${{ secrets.TEST_GOOGLE_CLIENT_SECRET }}';
          process.env.CALLBACK_URL = '${{ secrets.TEST_CALLBACK_URL }}';

          process.env.REACT_APP_AWS_ACCESS_KEY_ID = '${{ secrets.TEST_AWS_ACCESS_KEY_ID }}';
          process.env.REACT_APP_AWS_SECRET_ACCESS_KEY = '${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}';
          process.env.REACT_APP_AWS_REGION = '${{ secrets.TEST_AWS_REGION }}';
          process.env.REACT_APP_S3_BUCKET_NAME = '${{ secrets.TEST_S3_BUCKET_NAME }}';
          EOL

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests
        working-directory: ./backend
        run: npm test
        env:
          CI: true
          NODE_ENV: test

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage

  collect-coverage:
    name: Collect Coverage
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend coverage
        uses: actions/download-artifact@v3
        with:
          name: frontend-coverage
          path: coverage/frontend

      - name: Download backend coverage
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
          path: coverage/backend

      - name: Upload combined coverage
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage
          path: coverage